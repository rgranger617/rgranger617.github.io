for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 10000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 10000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 10000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 10000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 10000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 10000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.5
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.5
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
mean(X)
xbar = mean(X)
xbar = mean(X)
dnorm(xbar,10,(s1+1)/500)
s1 = 3
dnorm(xbar,10,sqrt((s1+1))/500)
s2 = 2.8
dnorm(xbar,10,sqrt((s2+1))/500)
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
s1 = 3
s2 = 2.8
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
s1 = 3
s2 = 2.8
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
s1 = 3
s2 = 2.8
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3
s2 = 2.5
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3
s2 = 3
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3
s2 = 2.0
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3
s2 = 3.1
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
VAR(x)
var(X)
xbar = mean(X)
s1 = 3.28182
s2 = 3.1
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3.28182
s2 = 3.2
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3.28182
s2 = 3.28
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3
s2 = 2.5
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
s2 = 2.8
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
dnorm(x,10,sqrt(s1+1))
dnorm(X,10,sqrt(s1+1))
prod(dnorm(X,10,sqrt(s1+1)))
sum(dnorm(X,10,sqrt(s1+1),log=TRUE))
sum(dnorm(X,10,sqrt(s2+1),log=TRUE))
sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE))
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
xbar = mean(X)
s1 = 3
s2 = 2.8
samples = 100000
### Model 1 (Daniel)
SIGMA2M1 = 3.0
posteriorMUM1 = rnorm(samples, m*mean(X)/(SIGMA2M1+m),sqrt(SIGMA2M1/(SIGMA2M1+m)))
### Model 2 (Brandon)
SIGMA2M2 = 2.8
posteriorMUM2 = rnorm(samples, m*mean(X)/(SIGMA2M2+m),sqrt(SIGMA2M2/(SIGMA2M2+m)))
mloglikeM1 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM1[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M1),log=TRUE))
}
mloglikeM2 = rep(NA,samples)
for(samp in 1:samples){
MUsamp = posteriorMUM1[samp]
mloglikeM2[samp] = sum(dnorm(X,MUsamp,sqrt(SIGMA2M2),log=TRUE))
}
BF12(mloglikeM1,mloglikeM2)
xbar = mean(X)
s1 = 3
s2 = 2.8
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
s1 = 3
s2 = 1
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
s2 = 2
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
s2 = 1.5
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
sqrt(s1+1)
(s1+1))/500
sqrt((s1+1))/500)
sqrt((s1+1))/500
sqrt(s1+1)
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
xbar = mean(X)
s1 = 3
s2 = 2
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
xbar = mean(X)
s1 = 3
s2 = 2
dnorm(xbar,10,sqrt((s1+1))/500)/dnorm(xbar,10,sqrt((s2+1))/500)
exp(sum(dnorm(X,10,sqrt(s1+1),log=TRUE))-sum(dnorm(X,10,sqrt(s2+1),log=TRUE)))
var(X)
usethis::use_git()
version <- as.character(R.Version()$version.string)
pongtitle <- c("Pong ", version)
windows(title = paste(pongtitle, collapse = ''))
par(mar = rep(1, 4), bg = "black" )
plot.new()
plot.window(xlim = c(0, 101), ylim = c(0, 101))
lines(c(1, 100, 100, 1, 1), c(1, 1, 100, 100, 1), col = "white")
keep_playing <- T
Initial Paddle Positions
paddle1.y <- 50
paddle2.y <- 50
draw_paddle <- function(x, y) {
rect(x - .5, y -3.5, x +.5, y + 3.5, col = "white")
}
clear_paddle <- function(x, y) {
rect(x - .5, y -3.5, x +.5, y + 3.5, col = "black")
}
paddle2.ya <<- paddle2.y
key_event_handler <- function(key) {
if (key == "Up" && paddle2.y < 95 ) {
paddle2.ya <<- paddle2.y
paddle2.y <<- paddle2.y + 2
} else if (key == "Down" && paddle2.y > 5) {
paddle2.ya <<- paddle2.y
paddle2.y <<- paddle2.y -2
} else if (key == "q") {
keep_playing <<- F
}
update_paddles <- function() {
clear_paddle(90, paddle2.ya)
draw_paddle(90, paddle2.y)
}
Initial Ball positions
update_paddles <- function() {
clear_paddle(90, paddle2.ya)
draw_paddle(90, paddle2.y)
}
#Initial Ball positions
ball.x <- 50
ball.y <- 50
ball.dx <- 2.5
ball.dy <- 1
draw_ball <- function(x, y) {
symbols(x, y, circles = 1, inches = F, add = T, fg = "white", bg = "white")
}
clear_ball <- function(x, y) {
symbols(x, y, circles = 1, inches = F, add = T, fg = "black", bg = "black")
}
move.ball <- function() {
ball.x <<- ball.x + ball.dx
ball.y <<- ball.y + ball.dy
}
collisions <- function() {
if(ball.x <= 12.5 && ball.x >= 7.5 && ball.y <= paddle1.y + 3.5 & ball.y >= paddle1.y -3.5){
ball.dx <<- -ball.dx
}
if(ball.x >= 87.5 && ball.y <= paddle2.y + 3.5 & ball.y >= paddle2.y -3.5){
ball.dx <<- -ball.dx
}
if(ball.y >= 99 | ball.y <= 4){
ball.dy <<- -ball.dy
}
if(ball.x >= 99 | ball.x <= 3.5){
ball.dx <<- -ball.dx
}
update.ball <- function() {
clear_ball(ball.x, ball.y)
move.ball()
collisions()
draw_ball(ball.x, ball.y)
}
update.movement <- function() {
update_paddles()
update.ball()
}
idle <- update.ball()
draw_paddle(90, paddle2.y)
draw_paddle(10, paddle1.y)
draw_ball(ball.x, ball.y)
game_loop <- while (keep_playing) {
update.movement()
getGraphicsEventEnv()
getGraphicsEvent(onKeybd = key_event_handler, onIdle = idle)
}
X=rbeta(1000,10,5)
hist(X)
